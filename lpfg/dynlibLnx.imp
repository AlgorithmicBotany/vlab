#include <dlfcn.h>
#include <qapplication.h>
#include <unistd.h>
#include <time.h>
#include <cstdlib>
#include <cerrno>
#include <stdio.h>
#include <iostream>

DynLibrary::DynLibrary() : _handle(0), _tmpId(0), _pid(getpid()) {}

DynLibrary::~DynLibrary() {
  if (Connected())
    Disconnect();
}

DynLibrary::Proc DynLibrary::GetProc(const std::string &name) const {

  ASSERT(Connected());
  return (Proc)(dlsym(_handle, name.c_str()));
}

#ifdef VLAB_MACX

void DynLibrary::Connect(const std::string &libname) {
  // make a temporary copy of this library
  // - this is to fool MacOS X into loading it, because otherwise it seems to be
  //   too intelligent and it does not really reload it (it caches it or
  //   something...)
  // ---------------------------------------------------------------------------------

  // generate a unique filename for the .so file
  char buff[4096];
  sprintf(buff, "/tmp/lpfg-%08d-%08d.so", _pid, ++_tmpId);
  _tmpName = buff;
  std::string cmd = "cp " + libname + " " + buff;
  system(cmd.c_str());
  _handle = dlopen(_tmpName.c_str(), RTLD_NOW);
  if (Connected()) {
    if (!_Map()) {
      Disconnect();
    }
  }
}
#else
void DynLibrary::Connect(const std::string &libname) {

  _handle = dlopen(libname.c_str(), RTLD_NOW | RTLD_LOCAL);
  if (Connected()) {
    if (!_Map())
      Disconnect();
  }
}
#endif

void DynLibrary::Disconnect() {
  ASSERT(Connected());
  _Unmap();
  dlclose(_handle);
  remove(_tmpName.c_str());
  _tmpName.clear();
  _handle = 0;
}

bool DynLibrary::Connected() const { return 0 != _handle; }
